//: [Previous](@previous)

import Foundation

/*:
 5. –°–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∏–∑ N —á–∏—Å–µ–ª –§–∏–±–æ–Ω–∞—á—á–∏, N  - —ç—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–∏.
 –°–æ–∑–¥–∞–π—Ç–µ 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏:
 –∞) —Å–æ–∑–¥–∞–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è —Ü–∏–∫–ª
 –±) —Å–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
 
 
 –ü—Ä–∏–º–µ—Ä:
 –í—Ö–æ–¥–Ω–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä:
 let n = 6
 
 –†–µ–∑—É–ª—å—Ç–∞—Ç: [0, 1, 1, 2, 3, 5]
*/

func getArrayOfFibonacci(from length: Int) -> [Int]? {
    guard length > 1 else {
        let array = length == 1 ? [0] : length == 0 ? [Int]() : nil
        return array
    }
    
    var firstElement = 0
    var secondElement = 1
    
    var arrayOfFibonacci = [firstElement, secondElement]
    
    for _ in 2..<length {
        let temp = secondElement
        secondElement = firstElement + secondElement
        firstElement = temp
        arrayOfFibonacci.append(secondElement)
    }
    return arrayOfFibonacci
}

func getArrayOfFibonacciWithRecursion(from length: Int) -> [Int]? {
    guard length > 1 else {
        let array = length == 1 ? [0] : length == 0 ? [Int]() : nil
        return array
    }
    
    // –£–∂–µ –∑–Ω–∞–µ–º —á—Ç–æ length –º–µ–Ω—å—à–µ –Ω—É–ª—è –Ω–µ –±—É–¥–µ—Ç, –ø–æ—Å–µ–º—É force unwrap üòà
    let arrayOfFibonacci = getArrayOfFibonacciWithRecursion(from: length - 1)! + getArrayOfFibonacciWithRecursion(from: length - 2)!
    return arrayOfFibonacci
}

let arrayOfFibonacci = getArrayOfFibonacci(from: 4)
let arrayOfFibonacciFromRecursion = getArrayOfFibonacci(from: 6)

//: [Next](@next)
